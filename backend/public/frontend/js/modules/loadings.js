// js/modules/loadings.js
// üéØ ARQUIVO PRINCIPAL - Orquestra todos os m√≥dulos

const Loadings = {
  // üöÄ Inicializa√ß√£o principal do sistema
  init: function() {
    console.log('üéØ Inicializando sistema DockFlow...');
    
    // Verificar depend√™ncias
    if (!this.checkDependencies()) {
      console.error('‚ùå Depend√™ncias n√£o encontradas');
      return;
    }
    
    // Inicializar todos os m√≥dulos
    this.initializeModules();
    
    // Configurar event listeners principais
    this.setupMainEventListeners();
    
    // Simulador WhatsApp
    this.initializeWhatsAppSimulator();
    
    console.log('‚úÖ Sistema DockFlow inicializado com sucesso!');
  },

  // üîç Verificar depend√™ncias
  checkDependencies: function() {
    const dependencies = ['LoadingsCore', 'LoadingsXML', 'LoadingsDocks', 'LoadingsScanning', 'LoadingsRoutes', 'LoadingsRouting', 'LoadingsHistory'];
    const missing = [];
    
    dependencies.forEach(dep => {
      if (typeof window[dep] === 'undefined') {
        missing.push(dep);
      }
    });
    
    if (missing.length > 0) {
      console.error('‚ùå M√≥dulos n√£o carregados:', missing);
      Utils.showErrorMessage(`M√≥dulos n√£o carregados: ${missing.join(', ')}`);
      return false;
    }
    
    console.log('‚úÖ Todos os m√≥dulos carregados');
    return true;
  },

  // üèóÔ∏è Inicializar m√≥dulos
  initializeModules: function() {
    console.log('üèóÔ∏è Inicializando m√≥dulos...');
    
    // Ordem de inicializa√ß√£o √© importante
    LoadingsCore.init();
    LoadingsDocks.init();
    LoadingsRoutes.init();
    LoadingsScanning.init();
    LoadingsXML.init();
    LoadingsRouting.init();
    LoadingsHistory.init();
    
    console.log('‚úÖ Todos os m√≥dulos inicializados');
  },

  // üìã Event listeners principais
  setupMainEventListeners: function() {
    // Bot√£o Simulador WhatsApp
    const toggleSimulatorBtn = document.getElementById('toggle-whatsapp-simulator');
    if (toggleSimulatorBtn) {
      toggleSimulatorBtn.addEventListener('click', () => {
        this.toggleWhatsAppSimulator();
      });
    }
    
    const simulateRequestBtn = document.getElementById('simulate-request-btn');
    if (simulateRequestBtn) {
      simulateRequestBtn.addEventListener('click', () => {
        this.simulateWhatsAppRequest();
      });
    }
    
    // Event listeners para abas
    this.setupTabListeners();
  },

  // üì± Inicializar simulador WhatsApp
  initializeWhatsAppSimulator: function() {
    console.log('üì± Inicializando simulador WhatsApp...');
    
    // Verificar se elementos existem
    const simulator = document.getElementById('whatsapp-simulator');
    const toggleBtn = document.getElementById('toggle-whatsapp-simulator');
    
    if (!simulator || !toggleBtn) {
      console.warn('‚ö†Ô∏è Elementos do simulador WhatsApp n√£o encontrados');
      return;
    }
    
    // Inicialmente oculto
    simulator.style.display = 'none';
    
    console.log('‚úÖ Simulador WhatsApp inicializado');
  },

  // üîÑ Alternar simulador WhatsApp
  toggleWhatsAppSimulator: function() {
    const simulator = document.getElementById('whatsapp-simulator');
    if (!simulator) return;
    
    const isVisible = simulator.style.display !== 'none';
    simulator.style.display = isVisible ? 'none' : 'block';
    
    if (!isVisible) {
      // Focar no primeiro campo quando abrir
      const firstInput = simulator.querySelector('input');
      if (firstInput) firstInput.focus();
    }
  },

  // üì± Simular solicita√ß√£o WhatsApp
  simulateWhatsAppRequest: function() {
    const cpf = document.getElementById('sim-cpf').value.trim();
    const name = document.getElementById('sim-name').value.trim();
    const plate = document.getElementById('sim-plate').value.trim();
    const route = document.getElementById('sim-route').value.trim();
    
    if (!cpf || !name || !plate || !route) {
      Utils.showErrorMessage('Preencha todos os campos do simulador');
      return;
    }
    
    const novoCarregamento = {
      id: Date.now(),
      driver_cpf: cpf,
      driver_name: name,
      vehicle_plate: plate,
      vehicle_type: 'Caminh√£o',
      phone_number: '11999999999',
      route_code: route,
      status: 'waiting',
      priority: 'normal',
      created_at: new Date().toISOString(),
      timestamp: new Date().toISOString()
    };
    
    LoadingsCore.allLoadings.push(novoCarregamento);
    
    Utils.showSuccessMessage(`Solicita√ß√£o enviada! Posi√ß√£o na fila: ${LoadingsCore.allLoadings.length}`);
    
    // Limpar campos
    document.getElementById('sim-cpf').value = '';
    document.getElementById('sim-name').value = '';
    document.getElementById('sim-plate').value = '';
    document.getElementById('sim-route').value = '';
    
    // Ocultar simulador
    document.getElementById('whatsapp-simulator').style.display = 'none';
    
    // Atualizar displays
    LoadingsCore.displayQueue(LoadingsCore.allLoadings);
    LoadingsCore.updateStats();
  },

  // üìÇ Event listeners das abas
  setupTabListeners: function() {
    // Aba rotas
    const routesTab = document.getElementById('routes-tab');
    if (routesTab) {
      routesTab.addEventListener('click', () => {
        setTimeout(() => {
          LoadingsRoutes.loadRoutes();
        }, 100);
      });
    }
  },

  // üéØ Fun√ß√µes de conveni√™ncia para compatibilidade
  showXmlTab: function() {
    LoadingsXML.showXmlTab();
  },

  resetXmlImport: function() {
    LoadingsXML.resetXmlImport();
  },

  // üìä Obter estat√≠sticas gerais
  getSystemStats: function() {
    return {
      loadings: LoadingsCore.allLoadings.length,
      docks: LoadingsDocks.getDocksStatus(),
      routes: LoadingsRoutes.getRoutesReport(),
      history: LoadingsHistory.getTodayStats()
    };
  },

  // üõ†Ô∏è Utilit√°rios do sistema
  utils: {
    // üîÑ Recarregar sistema completo
    reloadSystem: function() {
      console.log('üîÑ Recarregando sistema...');
      LoadingsCore.loadQueue();
      LoadingsRoutes.loadRoutes();
      LoadingsHistory.loadTodayHistory();
      LoadingsDocks.updateDocksDisplay();
      Utils.showSuccessMessage('Sistema recarregado!');
    },

    // üìä Diagn√≥stico do sistema
    diagnostics: function() {
      const stats = Loadings.getSystemStats();
      console.log('üìä Diagn√≥stico do Sistema:', stats);
      
      const report = `
üìä DIAGN√ìSTICO DO SISTEMA DOCKFLOW

üèóÔ∏è LOADINGS:
- Total: ${stats.loadings}
- Aguardando: ${LoadingsCore.allLoadings.filter(l => l.status === 'waiting').length}
- Aprovados: ${LoadingsCore.allLoadings.filter(l => l.status === 'approved').length}
- Carregando: ${LoadingsCore.allLoadings.filter(l => l.status === 'loading').length}
- Finalizados: ${LoadingsCore.allLoadings.filter(l => l.status === 'completed').length}

üè≠ DOCAS:
- Total: ${stats.docks.total}
- Livres: ${stats.docks.livre}
- Ocupadas: ${stats.docks.ocupada}
- Utiliza√ß√£o: ${stats.docks.ocupada > 0 ? Math.round((stats.docks.ocupada / stats.docks.total) * 100) : 0}%

üõ£Ô∏è ROTAS:
- Total: ${stats.routes.total}
- Ativas: ${stats.routes.active}
- Inativas: ${stats.routes.inactive}

üìö HIST√ìRICO HOJE:
- Total: ${stats.history.total}
- Finalizados: ${stats.history.completed}
- Ativos: ${stats.history.active}
- XML: ${stats.history.xmlImports}
- WhatsApp: ${stats.history.whatsappRequests}
      `;
      
      alert(report);
    },

    // üßπ Limpeza manual
    manualCleanup: function() {
      if (!confirm('Deseja executar limpeza manual do hist√≥rico?\n\nEsta a√ß√£o ir√° arquivar carregamentos finalizados.')) {
        return;
      }
      
      LoadingsHistory.performAutoClean();
      Utils.showSuccessMessage('Limpeza manual executada!');
    }
  },

  // üÜò Sistema de emerg√™ncia
  emergency: {
    // üö® Liberar todas as docas
    releaseAllDocks: function() {
      LoadingsDocks.resetAllDocks();
    },

    // üîÑ Reset completo do sistema
    fullReset: function() {
      if (!confirm('ATEN√á√ÉO: Reset completo do sistema!\n\nEsta a√ß√£o ir√°:\n- Limpar todos os carregamentos\n- Liberar todas as docas\n- Resetar contadores\n\nTem certeza?')) {
        return;
      }
      
      LoadingsCore.allLoadings = [];
      LoadingsDocks.resetAllDocks();
      LoadingsHistory.todayLoadings = [];
      
      LoadingsCore.displayQueue([]);
      LoadingsCore.updateStats();
      LoadingsDocks.updateDocksDisplay();
      LoadingsHistory.displayHistoryCards();
      
      Utils.showWarningMessage('‚ö†Ô∏è Sistema resetado completamente!');
    }
  }
};

// üåê Expor globalmente para compatibilidade
window.Loadings = Loadings;

// üöÄ Auto-inicializa√ß√£o quando DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
  // Aguardar um pouco para garantir que todos os m√≥dulos foram carregados
  setTimeout(() => {
    if (typeof Loadings !== 'undefined') {
      Loadings.init();
    } else {
      console.error('‚ùå Objeto Loadings n√£o encontrado');
    }
  }, 500);
});